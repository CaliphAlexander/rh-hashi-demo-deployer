---
- name: Provision aap for AAP-HashiCorp integrated demo
  hosts: "{{ groups['aap_hashi_aap'][0] }}"
  tags: aap

  roles:

    - name: aap_provision
      tags: aap_provision
    - name: aap_install
      tags: aap_install

- name: Run configuration for aap
  hosts: "{{ groups['aap_hashi_aap'][0] }}"
  tags: aap_configure

  vars:

    ansible_user: "{{ aap_user }}"

  tasks:

    - name: Add a new organization to controller
      ansible.platform.organization:
        gateway_hostname: "{{ inventory_hostname }}"
        gateway_username: admin
        gateway_password: "{{ aap_install_common_password }}"
        validate_certs: false
        name: "RH-Hashi"
        state: present

    - name: Add a new inventory to controller
      register: inventory
      ansible.controller.inventory:
        name: "RH-Hashi"
        organization: "RH-Hashi"
        description: Inventory for AAP
        state: present
        controller_host: https://{{ inventory_hostname }}
        controller_username: admin
        controller_password: "{{ aap_install_common_password }}"
        validate_certs: false

    - name: Add hosts from local inventory to controller with ansible.controller.host
      loop: "{{ groups['all'] }}"
      ansible.controller.host:
        name: "{{ item }}"
        inventory: "RH-Hashi"
        state: present
        controller_host: https://{{ inventory_hostname }}
        controller_username: admin
        controller_password: "{{ aap_install_common_password }}"
        validate_certs: false

    - name: Add groups from local inventory to controller with ansible.controller.group
      ansible.controller.group:
        name: "{{ item.key }}"
        controller_host: https://{{ inventory_hostname }}
        controller_username: admin
        controller_password: "{{ aap_install_common_password }}"
        validate_certs: false
        inventory: "RH-Hashi"
        hosts: "{{ groups[ item.key ] }}"
      when: item.key != "all" and item.key != "ungrouped" and item.key != "aap_hashi"
      loop: "{{ lookup('ansible.builtin.dict', groups) }}"

    - name: Add aap_hashi group from local inventory to controller with ansible.controller.group
      ansible.controller.group:
        name: "aap_hashi"
        controller_host: https://{{ inventory_hostname }}
        controller_username: admin
        controller_password: "{{ aap_install_common_password }}"
        validate_certs: false
        inventory: "RH-Hashi"
        variables: "{{ lookup('ansible.builtin.file', 'group_vars/all.yml') | from_yaml }}"
        children:
          - aap_hashi_aap
          - aap_hashi_gitlab
          - aap_hashi_terraform
          - aap_hashi_vault

    # - name: Wait for automation hub to be running
    #   ansible.builtin.uri: # use the first host from the list if no hostname is defined
    #     url: https://{{ ah_hostname }}:{{ __aap_setup_inst_hub_port }}/api/galaxy/
    #     method: GET
    #     user: admin
    #     password: "{{ aap_setup_prep_inv_secrets.all.hub_admin_password | default(aap_setup_prep_inv_vars.all.hub_admin_password) }}"
    #     force_basic_auth: true
    #     status_code: 200
    #     validate_certs: "{{ ah_validate_certs | default(omit) }}"
    #   register: __aap_setup_inst_result_ah
    #   until: __aap_setup_inst_result_ah.status == 200
    #   retries: 90
    #   delay: 10
    #   when: "'automationhub' in aap_setup_prep_inv_nodes"

    # - name: Wait for EDA controller to be running
    #   ansible.builtin.uri: # use the first host from the list if no hostname is defined
    #     url: https://{{ eda_hostname }}:{{ __aap_setup_inst_eda_port }}/
    #     method: GET
    #     user: admin
    #     password: "{{ aap_setup_prep_inv_secrets.all.eda_admin_password | default(aap_setup_prep_inv_vars.all.eda_admin_password) }}"
    #     validate_certs: "{{ eda_validate_certs | default('false') }}"
    #     force_basic_auth: true
    #   register: __aap_setup_inst_result_eda
    #   until: __aap_setup_inst_result_eda.status == 200
    #   retries: 90
    #   delay: 10
    #   when: "'automationeda' in aap_setup_prep_inv_nodes"

...
